[project]
name = "team-devtools"
description = "..."
readme = "README.md"
# https://peps.python.org/pep-0621/#readme
requires-python = ">=3.10"
dynamic = ["version"]

[dependency-groups]
dev = [
  "coverage[toml]>=7.6.9",
  "mkdocs-exclude>=1.0.2",
  "pytest>=8",
  "pytest-instafail>=0.5.0",
  "pytest-plus>=0.8.1",
  "pytest-sugar>=1.1.1",
  "pytest-xdist>=3.8.0",
]
docs = [
  "argparse-manpage>=4.7",
  "mkdocs-ansible>=24.12.0",
  "mkdocs-exclude>=1.0.2",
]
lint = ["pre-commit>=3.5.0", "pre-commit-uv>=4.1.4"]
pkg = ["build[virtualenv]", "twine"]

[build-system]
requires = [
  "setuptools_scm[toml] >= 7.0.5",  # required for "no-local-version" scheme
  "setuptools >= 65.3.0",  # required by pyproject+setuptools_scm integration and editable installs
]
build-backend = "setuptools.build_meta"

[tool.codespell]
ignore-words-list = ["SME"]

# Keep this default because xml/report do not know to use load it from config file:
# data_file = ".coverage"
[tool.coverage.paths]
source = ["src", "test", ".tox/*/site-packages"]

[tool.coverage.report]
exclude_also = ["if TYPE_CHECKING:", "pragma: no cover"]
fail_under = 100
ignore_errors = false
omit = ["test/*"]
show_missing = true
skip_covered = true
skip_empty = true

[tool.coverage.run]
# branch is more reliable than lines, protects against false positives
branch = true
concurrency = ["multiprocessing", "thread"]
# avoid failse positive warning, we still fail if coverage level is not met
disable_warnings = ["no-data-collected"]
parallel = true
source = ["src"]

[tool.pytest.ini_options]
addopts = "-p no:pytest_cov --durations=10 --failed-first"
norecursedirs = [
  "*.egg",
  ".cache",
  ".config",
  ".eggs",
  ".git",
  ".github",
  ".mypy_cache",
  ".projects",
  ".eggs",
  ".tox",
  "__pycache__",
  "build",
  "collections",
  "dist",
  "docs",
  "site",
  "src/*.egg-info",
]

[tool.ruff]
builtins = ["__"]
cache-dir = "./.cache/.ruff"
fix = true
line-length = 100
required-version = ">=0.7.1"
target-version = "py310"

[tool.ruff.lint]
external = [
  "DOC",  # pydoclint
]
ignore = [
  "COM812",  # conflicts with ISC001 on format
  "E501",  # line-too-long / rely on black
  "ISC001",  # conflicts with COM812 on format
  "S603",  # subprocess
  "S607",  # subprocess
]
select = ["ALL"]

[tool.ruff.lint.flake8-pytest-style]
parametrize-values-type = "tuple"

[tool.ruff.lint.isort]
known-first-party = ["src"]
lines-after-imports = 2  # Ensures consistency for cases when there's variable vs function/class definitions after imports

[tool.ruff.lint.per-file-ignores]
"test/*" = ["S101", "PLC0415"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.setuptools_scm]
# To prevent accidental pick of mobile version tags such 'v6'
git_describe_command = [
  "git",
  "describe",
  "--dirty",
  "--long",
  "--tags",
  "--match",
  "v*.*",
]
local_scheme = "no-local-version"
tag_regex = "^(?P<prefix>v)?(?P<version>[0-9.]+)(?P<suffix>.*)?$"
version_file = "src/team_devtools/_version.py"

[tool.tomlsort]
in_place = true
sort_inline_tables = true
sort_table_keys = true

[tool.tox]
env_list = ["pkg", "lint", "docs", "py", "devel"]
isolated_build = true
min_version = "4.28.4"
requires = [
  "tox>=4.28.4",
  "tox-extra >= 2.0.1",
  "tox-uv >= 1.28.0",
  "setuptools >= 65.3.0",  # editable installs
]

[tool.tox.env.devel]
commands = [
  ["sh", "-c", "uv pip list -q --format=freeze | tr '\\n' ','"],
  { extend = true, of = ["tool", "tox", "env_run_base", "commands"], replace = "ref" },
  ["git", "restore", "uv.lock"],
]
description = "Run the tests with newest dependencies (no lock and allowing prereleases)"
runner = "uv-venv-runner"
uv_sync_flags = ["--upgrade", "--prerelease=allow"]
uv_sync_locked = false

[tool.tox.env.docs]
commands = [
  [
    "mkdocs",
    { default = ["build", "--strict", "--site-dir=_readthedocs/html/"], extend = true, replace = "posargs" },
  ],
]
commands_post = []
commands_pre = []
dependency_groups = ["docs"]
description = "Builds docs"
skip_install = false

[tool.tox.env.lint]
commands = [["pre-commit", "run", "--all-files", "--show-diff-on-failure"]]
commands_post = []
commands_pre = []
dependency_groups = ["lint"]
description = "Run all linters"
pass_env = ["HOMEPATH", "PROGRAMDATA", "RUFF_OUTPUT_FORMAT"]
runner = "uv-venv-runner"
skip_install = true

[tool.tox.env.pkg]
commands = [
  ["rm", "-rf", "{tox_root}/dist/"],
  [
    "python",
    "-m",
    "build",
    "--outdir",
    "{tox_root}/dist/",
    "{tox_root}",
  ],
  ["sh", "-c", "python -m twine check --strict {tox_root}/dist/*"],
]
description = "Build package and check metadata"
group = "pkg"

[tool.tox.env_run_base]
allowlist_externals = ["rm", "sh"]
commands = [
  [
    "python",
    "-c",
    "import pathlib; pathlib.Path(\"{env_site_packages_dir}/cov.pth\").write_text(\"import coverage; coverage.process_startup()\")",
  ],
  [
    "coverage",
    "run",
    "-m",
    "pytest",
    { default = [
      "-ra",
      "-n",
      "auto",
      "--showlocals",
      "--doctest-modules",
      "--durations=10",
      "--junitxml=./junit.xml",
    ], extend = true, replace = "posargs" },
  ],
  ["coverage", "combine", "-q"],
  ["coverage", "xml", "-o", "{env_dir}/coverage.xml", "--fail-under=0"],
  ["coverage", "lcov", "-q", "--fail-under=0"],
  ["coverage", "report"],
]
commands_post = []
commands_pre = [["coverage", "erase"]]
dependency_groups = ["dev"]
description = """Run the tests: py{py_dot_ver}"""
package = "editable"
pass_env = [
  "CI",
  "CONTAINER_*",
  "CURL_CA_BUNDLE",
  "FORCE_COLOR",
  "DOCKER_*",
  "GITHUB_*",
  "HOME",
  "LANG",
  "LC_*",
  "NO_COLOR",
  "PRE_COMMIT_HOME",
  "PYTEST_*",  # allows developer to define their own preferences
  "PYTEST_REQPASS",  # needed for CI
  "PYTHON*",  # PYTHONPYCACHEPREFIX, PYTHONIOENCODING, PYTHONBREAKPOINT,...
  "PYTHONBREAKPOINT",
  "PYTHONIOENCODING",
  "PYTHONPYCACHEPREFIX",
  "PY_COLORS",
  "REQUESTS_CA_BUNDLE",
  "RTD_TOKEN",
  "SETUPTOOLS_SCM_DEBUG",
  "SSH_AUTH_SOCK",
  "TERM",
  "USER",
  "SSL_CERT_FILE",  # https proxies
  "SSH_AUTH_SOCK",  # may be needed by git
  "UV_*",
]
runner = "uv-venv-lock-runner"

[tool.tox.env_run_base.set_env]
COVERAGE_COMBINED = "{env_dir}/.coverage"
COVERAGE_FILE = "{env:COVERAGE_FILE:{env_dir}/.coverage.{env_name}}"
COVERAGE_PROCESS_START = "{tox_root}/pyproject.toml"
# see https://github.com/tox-dev/tox/issues/2092#issuecomment-2538729079
# see https://github.com/Kozea/CairoSVG/issues/392#issuecomment-2538707712
DYLD_FALLBACK_LIBRARY_PATH = "/opt/homebrew/lib:{env:DYLD_FALLBACK_LIBRARY_PATH}"

[tool.uv]
default-groups = ["dev", "docs", "lint", "pkg"]
package = true
